// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganeshdipdumbare/gymondo-subscription/db (interfaces: DB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ganeshdipdumbare/gymondo-subscription/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockDB) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockDBMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDB)(nil).Disconnect), arg0)
}

// GetProduct mocks base method.
func (m *MockDB) GetProduct(arg0 context.Context, arg1 string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockDBMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockDB)(nil).GetProduct), arg0, arg1)
}

// GetSubscriptionByID mocks base method.
func (m *MockDB) GetSubscriptionByID(arg0 context.Context, arg1 string) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockDBMockRecorder) GetSubscriptionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockDB)(nil).GetSubscriptionByID), arg0, arg1)
}

// SaveSubscription mocks base method.
func (m *MockDB) SaveSubscription(arg0 context.Context, arg1 *domain.UserSubscription) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscription", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSubscription indicates an expected call of SaveSubscription.
func (mr *MockDBMockRecorder) SaveSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockDB)(nil).SaveSubscription), arg0, arg1)
}
