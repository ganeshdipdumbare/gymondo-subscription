// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganeshdipdumbare/gymondo-subscription/app (interfaces: App)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ganeshdipdumbare/gymondo-subscription/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// BuySubscription mocks base method.
func (m *MockApp) BuySubscription(arg0 context.Context, arg1, arg2 string) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuySubscription indicates an expected call of BuySubscription.
func (mr *MockAppMockRecorder) BuySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuySubscription", reflect.TypeOf((*MockApp)(nil).BuySubscription), arg0, arg1, arg2)
}

// GetProduct mocks base method.
func (m *MockApp) GetProduct(arg0 context.Context, arg1 string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockAppMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockApp)(nil).GetProduct), arg0, arg1)
}

// GetSubscriptionByID mocks base method.
func (m *MockApp) GetSubscriptionByID(arg0 context.Context, arg1 string) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockAppMockRecorder) GetSubscriptionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockApp)(nil).GetSubscriptionByID), arg0, arg1)
}

// UpdateSubscriptionStatusByID mocks base method.
func (m *MockApp) UpdateSubscriptionStatusByID(arg0 context.Context, arg1 string, arg2 domain.SubscriptionStatus) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionStatusByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionStatusByID indicates an expected call of UpdateSubscriptionStatusByID.
func (mr *MockAppMockRecorder) UpdateSubscriptionStatusByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionStatusByID", reflect.TypeOf((*MockApp)(nil).UpdateSubscriptionStatusByID), arg0, arg1, arg2)
}
